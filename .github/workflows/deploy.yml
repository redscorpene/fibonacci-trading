name: Deploy to Cloud Run
on:
  push:
    branches: ["main"]

env:
  PROJECT_ID: "fibonacci-trading-ai"
  REGION: "us-central1"
  ARTIFACT_REPO: "fibonacci-trading-repo"
  GCR_REPO: "gcr.io"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4

      # Authenticate to Google Cloud
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          create_credentials_file: true

      - uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      # Configure Docker authentication
      - name: Set up Docker Auth
        run: |
          gcloud auth configure-docker ${{ env.GCR_REPO }}
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      # Build and push main trading service
      - name: Build Main Trading Image
        run: |
          docker build \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/fibonacci-trading:latest \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/fibonacci-trading:${{ github.sha }} \
            .
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/fibonacci-trading:latest
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/fibonacci-trading:${{ github.sha }}

      # Deploy main trading service
      - name: Deploy Main Trading Service
        run: |
          gcloud run deploy fibonacci-trading \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/fibonacci-trading:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --update-env-vars="GIT_COMMIT=${{ github.sha }}" \
            --port=8080 \
            --concurrency=10

      # Build and push autonomous base image
      - name: Build Autonomous Base Image
        run: |
          docker build \
            -f Dockerfile.autonomous \
            -t ${{ env.GCR_REPO }}/${{ env.PROJECT_ID }}/autonomous-base:latest \
            -t ${{ env.GCR_REPO }}/${{ env.PROJECT_ID }}/autonomous-base:${{ github.sha }} \
            .
          docker push ${{ env.GCR_REPO }}/${{ env.PROJECT_ID }}/autonomous-base:latest
          docker push ${{ env.GCR_REPO }}/${{ env.PROJECT_ID }}/autonomous-base:${{ github.sha }}

      # Deploy autonomous services
      - name: Deploy Autonomous Services
        run: |
          # Market Data Collector
          gcloud run deploy market-data-collector \
            --image ${{ env.GCR_REPO }}/${{ env.PROJECT_ID }}/autonomous-base:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 1 \
            --no-allow-unauthenticated \
            --update-secrets="SERVICE_ACCOUNT_KEY=fibonacci-key:latest" \
            --set-env-vars="GOOGLE_APPLICATION_CREDENTIALS=/app/key.json" \
            --timeout=600s \
            --port=8080 \
            --concurrency=1

          # Autonomous Learning
          gcloud run deploy autonomous-learning \
            --image ${{ env.GCR_REPO }}/${{ env.PROJECT_ID }}/autonomous-base:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --memory 2Gi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 1 \
            --no-allow-unauthenticated \
            --update-secrets="SERVICE_ACCOUNT_KEY=fibonacci-key:latest" \
            --set-env-vars="GOOGLE_APPLICATION_CREDENTIALS=/app/key.json" \
            --timeout=300s \
            --port=8080 \
            --concurrency=10

      # Final status check
      - name: Verify Deployments
        run: |
          echo "Service URLs:"
          gcloud run services list \
            --region ${{ env.REGION }} \
            --format="table(SERVICE,URL)"
          echo ""
          echo "Deployment complete!"